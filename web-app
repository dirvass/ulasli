import React, { useMemo, useState } from "react";

// Annual Profit Planner – Single-file React app
// Assumptions:
// - EBITDA = dailyFee * 365 * occupancy
// - Net Profit = EBITDA * (1 - costPct)
// - ROI for 5/10/15 years = Net Profit * years
// - Currency is €, numbers are formatted with locale 'de-DE' for thousands separator

export default function AnnualProfitPlanner() {
  type Villa = {
    id: string;
    name: string;
    dailyFee: number; // € per night
    occupancy: number; // 0..1
    costPct: number; // 0..1
  };

  const [villas, setVillas] = useState<Villa[]>([
    { id: crypto.randomUUID(), name: "Villa A", dailyFee: 750, occupancy: 0.6, costPct: 0.35 },
    { id: crypto.randomUUID(), name: "Villa B", dailyFee: 500, occupancy: 0.6, costPct: 0.35 },
  ]);

  const [currency, setCurrency] = useState("€");

  const fmt = (n: number) =>
    new Intl.NumberFormat("de-DE", { maximumFractionDigits: 2 }).format(n);

  const years = [5, 10, 15];

  const rows = useMemo(() => {
    return villas.map(v => {
      const ebitda = v.dailyFee * 365 * v.occupancy;
      const net = ebitda * (1 - v.costPct);
      return { ...v, ebitda, net };
    });
  }, [villas]);

  const totals = useMemo(() => {
    const ebitda = rows.reduce((a, r) => a + r.ebitda, 0);
    const net = rows.reduce((a, r) => a + r.net, 0);
    return { ebitda, net };
  }, [rows]);

  function update(id: string, patch: Partial<Villa>) {
    setVillas(prev => prev.map(v => (v.id === id ? { ...v, ...patch } : v)));
  }

  function addVilla() {
    const idx = villas.length + 1;
    setVillas(prev => [
      ...prev,
      { id: crypto.randomUUID(), name: `Villa ${String.fromCharCode(64 + idx)}`, dailyFee: 600, occupancy: 0.6, costPct: 0.35 },
    ]);
  }

  function removeVilla(id: string) {
    setVillas(prev => prev.filter(v => v.id !== id));
  }

  function applyPreset(type: "pessimistic" | "base" | "optimistic") {
    setVillas(prev =>
      prev.map(v => {
        if (type === "pessimistic") return { ...v, dailyFee: Math.round(v.dailyFee * 0.67), occupancy: 0.6, costPct: 0.4 };
        if (type === "optimistic") return { ...v, dailyFee: Math.round(v.dailyFee * 1.33), occupancy: 0.6, costPct: 0.3 };
        return { ...v, occupancy: 0.6, costPct: 0.35 };
      })
    );
  }

  return (
    <div className="min-h-screen bg-slate-50 text-slate-900">
      <header className="sticky top-0 z-10 bg-white/80 backdrop-blur border-b border-slate-200">
        <div className="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
          <h1 className="text-2xl font-semibold">Annual Profit Planner</h1>
          <div className="flex items-center gap-2">
            <label className="text-sm font-medium">Currency</label>
            <select
              className="rounded-xl border px-3 py-1.5 text-sm"
              value={currency}
              onChange={e => setCurrency(e.target.value)}
            >
              <option value="€">€ Euro</option>
              <option value="$">$ USD</option>
              <option value="£">£ GBP</option>
            </select>
          </div>
        </div>
      </header>

      <main className="max-w-6xl mx-auto px-4 py-6">
        {/* Controls */}
        <section className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-3">
          <div className="flex flex-wrap gap-2 items-center">
            <span className="text-sm font-medium mr-2">Scenario presets:</span>
            <button onClick={() => applyPreset("pessimistic")} className="px-3 py-1.5 rounded-2xl bg-slate-200 hover:bg-slate-300 text-sm">Pesimistik</button>
            <button onClick={() => applyPreset("base")} className="px-3 py-1.5 rounded-2xl bg-slate-200 hover:bg-slate-300 text-sm">Muhtemel</button>
            <button onClick={() => applyPreset("optimistic")} className="px-3 py-1.5 rounded-2xl bg-slate-200 hover:bg-slate-300 text-sm">Optimistik</button>
          </div>
          <div className="flex gap-2 md:justify-end">
            <button onClick={addVilla} className="px-3 py-1.5 rounded-2xl bg-emerald-600 text-white hover:bg-emerald-700 text-sm">+ Villa ekle</button>
          </div>
        </section>

        {/* Table */}
        <div className="overflow-x-auto rounded-2xl shadow-sm border bg-white">
          <table className="w-full text-sm">
            <thead className="bg-slate-100">
              <tr className="text-left">
                <th className="p-3">Villa</th>
                <th className="p-3">Günlük Ücret</th>
                <th className="p-3">Doluluk</th>
                <th className="p-3">Maliyet %</th>
                <th className="p-3">EBITDA (yıllık)</th>
                <th className="p-3">Yıllık Net Kâr</th>
                <th className="p-3">5Y ROI</th>
                <th className="p-3">10Y ROI</th>
                <th className="p-3">15Y ROI</th>
                <th className="p-3"></th>
              </tr>
            </thead>
            <tbody>
              {rows.map((r) => (
                <tr key={r.id} className="border-t">
                  <td className="p-3 font-medium">
                    <input
                      className="w-28 rounded-xl border px-2 py-1"
                      value={r.name}
                      onChange={e => update(r.id, { name: e.target.value })}
                    />
                  </td>
                  <td className="p-3">
                    <div className="flex items-center gap-1">
                      <span>{currency}</span>
                      <input
                        type="number"
                        min={0}
                        className="w-28 rounded-xl border px-2 py-1"
                        value={r.dailyFee}
                        onChange={e => update(r.id, { dailyFee: Number(e.target.value || 0) })}
                      />
                      <span className="text-slate-500 text-xs">/gece</span>
                    </div>
                  </td>
                  <td className="p-3">
                    <div className="flex items-center gap-2">
                      <input
                        type="number"
                        min={0}
                        max={100}
                        className="w-20 rounded-xl border px-2 py-1"
                        value={Math.round(r.occupancy * 100)}
                        onChange={e => update(r.id, { occupancy: Math.min(100, Math.max(0, Number(e.target.value))) / 100 })}
                      />
                      <span className="text-slate-500">%</span>
                    </div>
                  </td>
                  <td className="p-3">
                    <div className="flex items-center gap-2">
                      <input
                        type="number"
                        min={0}
                        max={100}
                        className="w-20 rounded-xl border px-2 py-1"
                        value={Math.round(r.costPct * 100)}
                        onChange={e => update(r.id, { costPct: Math.min(100, Math.max(0, Number(e.target.value))) / 100 })}
                      />
                      <span className="text-slate-500">%</span>
                    </div>
                  </td>
                  <td className="p-3">{currency} {fmt(r.ebitda)}</td>
                  <td className="p-3 font-medium text-emerald-700">{currency} {fmt(r.net)}</td>
                  <td className="p-3">{currency} {fmt(r.net * 5)}</td>
                  <td className="p-3">{currency} {fmt(r.net * 10)}</td>
                  <td className="p-3">{currency} {fmt(r.net * 15)}</td>
                  <td className="p-3 text-right">
                    <button onClick={() => removeVilla(r.id)} className="px-2 py-1 rounded-xl bg-slate-100 hover:bg-rose-50 hover:text-rose-600">Sil</button>
                  </td>
                </tr>
              ))}
            </tbody>
            <tfoot>
              <tr className="bg-slate-50 border-t">
                <td className="p-3 font-semibold">Toplam</td>
                <td className="p-3" colSpan={3}></td>
                <td className="p-3 font-semibold">{currency} {fmt(totals.ebitda)}</td>
                <td className="p-3 font-semibold text-emerald-700">{currency} {fmt(totals.net)}</td>
                <td className="p-3 font-semibold">{currency} {fmt(totals.net * 5)}</td>
                <td className="p-3 font-semibold">{currency} {fmt(totals.net * 10)}</td>
                <td className="p-3 font-semibold">{currency} {fmt(totals.net * 15)}</td>
                <td></td>
              </tr>
            </tfoot>
          </table>
        </div>

        {/* Helper text */}
        <p className="text-xs text-slate-500 mt-3">
          Formüller: EBITDA = Günlük Ücret × 365 × Doluluk. Net Kâr = EBITDA × (1 - Maliyet %).
          ROI (5/10/15 yıl) = Net Kâr × yıl sayısı. Tüm değerler yaklaşık hesaplamadır.
        </p>
      </main>
    </div>
  );
}

